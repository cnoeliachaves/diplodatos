{
  "paragraphs": [
    {
      "text": "print(s\"\"\"%html\n\u003ccenter\u003e\n    \u003ch1\u003e\u003ca href\u003d\"http://diplodatos.famaf.unc.edu.ar/\"\u003eDiplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones\u003c/a\u003e\u003c/h1\u003e\n    \u003ch2\u003eCurso \u003ca href\u003d\"https://sites.google.com/view/eleccion-optativas-diplodatos/programaci%C3%B3n-distribu%C3%ADda-sobre-grandes-vol%C3%BAmenes-de-datos\"\u003eProgramación Distribuida sobre Grandes Volúmenes de Datos\u003c/a\u003e\u003c/h2\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h3\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"$baseDir/comun/logo%20UNC%20FAMAF%202016.png\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n\"\"\")\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ccenter\u003e\n    \u003ch1\u003e\u003ca href\u003d\"http://diplodatos.famaf.unc.edu.ar/\"\u003eDiplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones\u003c/a\u003e\u003c/h1\u003e\n    \u003ch2\u003eCurso \u003ca href\u003d\"https://sites.google.com/view/eleccion-optativas-diplodatos/programaci%C3%B3n-distribu%C3%ADda-sobre-grandes-vol%C3%BAmenes-de-datos\"\u003eProgramación Distribuida sobre Grandes Volúmenes de Datos\u003c/a\u003e\u003c/h2\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h3\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/comun/logo%20UNC%20FAMAF%202016.png\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106098_-792379553",
      "id": "20171030-111535_1286884722",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Antes de comenzar\n#### En máquina virtual o nabuco\n1. Lanzar terminal\n1. Actualizar repo:\n```sh\ncd diplodatos_bigdata\ngit pull\n```\n1. Instalar una virtualenv\n```sh\ncd\ncd spark\nvirtualenv -p /usr/bin/python2 python_zeppelin\n. python_zeppelin/bin/activate\npip install matplotlib pandas plotly\n```\n\n1. Lanzar [Zeppelin](http://zeppelin.apache.org/):\n```sh\ncd spark/zeppelin-0.7.3-bin-all\n./bin/zeppelin.sh\n```\n1. En navegador abrir [http://localhost:8080](http://localhost:8080) o `http://nabucodonosor.ccad.unc.edu.ar:\u003cmi puerto\u003e`\n1. Seleccionar `Import note`\n1. Elegir json en `diplodatos_bigdata/clases/05_ml/note.json`\n2. Seleccionar `Clase 05 - Machine Learning`\n\n----\n\n#### En notebook \n\n##### instalar Python Matplotlib y Pandas\n\n* En la terminal ejecutar\n```sh\nsudo apt-get install python-matplotlib python-pandas python-plotly\n```\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eAntes de comenzar\u003c/h3\u003e\n\u003ch4\u003eEn máquina virtual o nabuco\u003c/h4\u003e\n\u003col\u003e\n  \u003cli\u003eLanzar terminal\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eActualizar repo:\u003c/p\u003e\n  \u003cpre\u003e\u003ccode class\u003d\"sh\"\u003ecd diplodatos_bigdata\ngit pull\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eInstalar una virtualenv\u003c/p\u003e\n  \u003cpre\u003e\u003ccode class\u003d\"sh\"\u003ecd\ncd spark\nvirtualenv -p /usr/bin/python2 python_zeppelin\n. python_zeppelin/bin/activate\npip install matplotlib pandas plotly\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eLanzar \u003ca href\u003d\"http://zeppelin.apache.org/\"\u003eZeppelin\u003c/a\u003e:\u003c/p\u003e\n  \u003cpre\u003e\u003ccode class\u003d\"sh\"\u003ecd spark/zeppelin-0.7.3-bin-all\n./bin/zeppelin.sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003eEn navegador abrir \u003ca href\u003d\"http://localhost:8080\"\u003ehttp://localhost:8080\u003c/a\u003e o \u003ccode\u003ehttp://nabucodonosor.ccad.unc.edu.ar:\u0026lt;mi puerto\u0026gt;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eSeleccionar \u003ccode\u003eImport note\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eElegir json en \u003ccode\u003ediplodatos_bigdata/clases/05_ml/note.json\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eSeleccionar \u003ccode\u003eClase 05 - Machine Learning\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr/\u003e\n\u003ch4\u003eEn notebook\u003c/h4\u003e\n\u003ch5\u003einstalar Python Matplotlib y Pandas\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e\n  \u003cp\u003eEn la terminal ejecutar\u003c/p\u003e\n  \u003cpre\u003e\u003ccode class\u003d\"sh\"\u003esudo apt-get install python-matplotlib python-pandas python-plotly\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106100_-794688046",
      "id": "20171030-111641_2139999376",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Areas del Big Data\n- Analitics (datos estructurados)\n- Streaming (real time)\n- **Machine Learning**\n- Análisis de Redes (grandes grafos)\n- Visualización",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAreas del Big Data\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003eAnalitics (datos estructurados)\u003c/li\u003e\n  \u003cli\u003eStreaming (real time)\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eMachine Learning\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eAnálisis de Redes (grandes grafos)\u003c/li\u003e\n  \u003cli\u003eVisualización\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106101_-795072795",
      "id": "20181026-174017_2147321926",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n![](https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/05_ml/unified_stack.png)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/05_ml/unified_stack.png\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106103_-794303297",
      "id": "20181026-174035_2101012250",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Machine Learning\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eMachine Learning\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106105_-796611790",
      "id": "20171030-131603_726204322",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Programación tradicional\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:Datos Entrada{bg:cornsilk}]-\u003e[Algoritmo{bg:red}]\n  [Algoritmo{bg:red}]-\u003e[note:Datos Salida{bg:cornsilk}]\n%%%\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eProgramación tradicional\u003c/h3\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain/class/%5Bnote%3ADatos%E2%80%82Entrada%7Bbg%3Acornsilk%7D%5D-%3E%5BAlgoritmo%7Bbg%3Ared%7D%5D%2C+%5BAlgoritmo%7Bbg%3Ared%7D%5D-%3E%5Bnote%3ADatos%E2%80%82Salida%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106107_-795842293",
      "id": "20171030-131619_420103761",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Machine Learning \u003d algoritmos que generan algoritmos.",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eMachine Learning \u003d algoritmos que generan algoritmos.\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106109_-798150786",
      "id": "20171030-131659_166449551",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Entrenamiento:\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:Datos;Entrenamiento{bg:cornsilk}]-\u003e[Algoritmo;ML{bg:red}]\n  [Algoritmo;ML{bg:red}]-\u003e[note:Algoritmo;(modelo){bg:orange}]\n%%%\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eEntrenamiento:\u003c/h4\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3ADatos%3BEntrenamiento%7Bbg%3Acornsilk%7D%5D-%3E%5BAlgoritmo%3BML%7Bbg%3Ared%7D%5D%2C+%5BAlgoritmo%3BML%7Bbg%3Ared%7D%5D-%3E%5Bnote%3AAlgoritmo%3B%28modelo%29%7Bbg%3Aorange%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106110_-796996539",
      "id": "20171030-131720_1434322443",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Uso:\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:Datos Entrada{bg:cornsilk}]-\u003e[Algoritmo;(modelo){bg:orange}]\n  [Algoritmo;(Modelo)]-\u003e[note:Datos Salida{bg:cornsilk}]\n%%%\n\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eUso:\u003c/h4\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3ADatos%E2%80%82Entrada%7Bbg%3Acornsilk%7D%5D-%3E%5BAlgoritmo%3B%28modelo%29%7Bbg%3Aorange%7D%5D%2C+%5BAlgoritmo%3B%28Modelo%29%5D-%3E%5Bnote%3ADatos%E2%80%82Salida%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106112_-811616998",
      "id": "20171030-113042_604094829",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Todo junto:",
      "text": "%md\n%%% yuml type\u003dclass style\u003dplain dir\u003dlr format\u003dsvg\n  [note:Datos;Entrenamiento{bg:cornsilk}]-\u003e[Algoritmo;ML]\n  [Algoritmo;ML{bg:red}]-\u003e[Algoritmo;(modelo){bg:orange}]\n  [note:Datos Entrada{bg:cornsilk}]-\u003e[Algoritmo;(modelo){bg:orange}]\n  [Algoritmo;(Modelo)]-\u003e[note:Datos Salida{bg:cornsilk}]\n%%%\n\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3ADatos%3BEntrenamiento%7Bbg%3Acornsilk%7D%5D-%3E%5BAlgoritmo%3BML%5D%2C+%5BAlgoritmo%3BML%7Bbg%3Ared%7D%5D-%3E%5BAlgoritmo%3B%28modelo%29%7Bbg%3Aorange%7D%5D%2C+%5Bnote%3ADatos%E2%80%82Entrada%7Bbg%3Acornsilk%7D%5D-%3E%5BAlgoritmo%3B%28modelo%29%7Bbg%3Aorange%7D%5D%2C+%5BAlgoritmo%3B%28Modelo%29%5D-%3E%5Bnote%3ADatos%E2%80%82Salida%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106114_-810847500",
      "id": "20171030-115900_1686761842",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Spark Machine Learning Library (MLlib)\n\n* Algoritmos ML: clasificación, regresión, clustering, filtrado colaborativo (recomendación), etc.\n* Manejo de features (featurization): extracción de features, transformación, reducción de dimensionalidad, selección, etc.\n* Pipelines: abstracción que representa flujo de trabajo en ML.\n* Persistencia: carga y guardado de modelos, algoritmos y pipelines.\n* Utilidades: álgebra lineal, estadística, manejo de datos, etc.\n* 2 APIs: sobre RDD (spark.mllib) o DataFrame (spark.ml)\n\n### Novedades!\n\nEn 2.0.0+ La API basada en **Dataframe** (spark.ml) es *primary API*:\n* No se agregan nuevas características a la API RDD (spark.mllib).\n* Solo se le corregirán errores.\n* Se irán agregando features de RDD a la API DataFrame.\n* En Spark 2.2 la API *deprecated*.\n* En Spark 3.0 se eliminará.\n\n#### Por lo tanto veremos la API basada en DataFrame\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eSpark Machine Learning Library (MLlib)\u003c/h1\u003e\n\u003cul\u003e\n  \u003cli\u003eAlgoritmos ML: clasificación, regresión, clustering, filtrado colaborativo (recomendación), etc.\u003c/li\u003e\n  \u003cli\u003eManejo de features (featurization): extracción de features, transformación, reducción de dimensionalidad, selección, etc.\u003c/li\u003e\n  \u003cli\u003ePipelines: abstracción que representa flujo de trabajo en ML.\u003c/li\u003e\n  \u003cli\u003ePersistencia: carga y guardado de modelos, algoritmos y pipelines.\u003c/li\u003e\n  \u003cli\u003eUtilidades: álgebra lineal, estadística, manejo de datos, etc.\u003c/li\u003e\n  \u003cli\u003e2 APIs: sobre RDD (spark.mllib) o DataFrame (spark.ml)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNovedades!\u003c/h3\u003e\n\u003cp\u003eEn 2.0.0+ La API basada en \u003cstrong\u003eDataframe\u003c/strong\u003e (spark.ml) es \u003cem\u003eprimary API\u003c/em\u003e:\u003cbr/\u003e* No se agregan nuevas características a la API RDD (spark.mllib).\u003cbr/\u003e* Solo se le corregirán errores.\u003cbr/\u003e* Se irán agregando features de RDD a la API DataFrame.\u003cbr/\u003e* En Spark 2.2 la API \u003cem\u003edeprecated\u003c/em\u003e.\u003cbr/\u003e* En Spark 3.0 se eliminará.\u003c/p\u003e\n\u003ch4\u003ePor lo tanto veremos la API basada en DataFrame\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106115_-811232249",
      "id": "20181023-183558_542765570",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Tipos Básicos\n\n#### Todo es\n* Estimator \u003d Algoritmo ML (algoritmo que genera algoritmo)\n* Transformer \u003d Modelo (algoritmo)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTipos Básicos\u003c/h3\u003e\n\u003ch4\u003eTodo es\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eEstimator \u003d Algoritmo ML (algoritmo que genera algoritmo)\u003c/li\u003e\n  \u003cli\u003eTransformer \u003d Modelo (algoritmo)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106117_-813540742",
      "id": "20171030-131935_1623447756",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Entrenamiento:\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:Dataframe;Entrenamiento{bg:cornsilk}]-\u003e[Estimator;(algoritmo ML)|fit()]\n  [Estimator;(algoritmo ML)|fit(){bg:red}]-\u003e[note:Transformer;(modelo){bg:orange}]\n%%%\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eEntrenamiento:\u003c/h4\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3ADataframe%3BEntrenamiento%7Bbg%3Acornsilk%7D%5D-%3E%5BEstimator%3B%28algoritmo%E2%80%82ML%29%7Cfit%28%29%5D%2C+%5BEstimator%3B%28algoritmo%E2%80%82ML%29%7Cfit%28%29%7Bbg%3Ared%7D%5D-%3E%5Bnote%3ATransformer%3B%28modelo%29%7Bbg%3Aorange%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106118_-812386495",
      "id": "20171030-132019_183881887",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Uso:\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:Dataframe;Entrada{bg:cornsilk}]-\u003e[Transformer;(modelo)|transform(){bg:orange}]\n  [Transformer;(modelo)|transform(){bg:orange}]-\u003e[note:Dataframe;Salida{bg:cornsilk}]\n%%%\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eUso:\u003c/h4\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3ADataframe%3BEntrada%7Bbg%3Acornsilk%7D%5D-%3E%5BTransformer%3B%28modelo%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D%2C+%5BTransformer%3B%28modelo%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D-%3E%5Bnote%3ADataframe%3BSalida%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106120_-814694989",
      "id": "20171030-124531_1138034350",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Ejemplo\n\n### Predicción de género a partir del peso y la altura.\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eEjemplo\u003c/h2\u003e\n\u003ch3\u003ePredicción de género a partir del peso y la altura.\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106122_-813925491",
      "id": "20171030-161240_1927838355",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Lectura datos de entrada",
      "text": "val inputFile \u003d \"../../diplodatos_bigdata/ds/people_sex_height_age_weight.json\"\n\nval people \u003d spark.read.json(inputFile)\n    .select($\"kgs\", $\"mts\", $\"sex\")\n    .repartition(sc.defaultParallelism)\n    .cache\n    \npeople.count\n\nz.show(people.sample(false,0.001),5)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106124_-816233984",
      "id": "20161101-163522_1877878760",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "División datos para entrenamiento y test",
      "text": "val Array(trainDF, testDF) \u003d people.randomSplit(Array(0.95, 0.05)) \n\ntestDF.count\ntrainDF.count",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106125_-816618733",
      "id": "20171030-162612_256050184",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Features",
      "text": "%md\n### Features\n\nLos algoritmos ML utilizan datos numeŕicos:\n\n* Como **entrada** toman un vector numérico - **vector de features**\n* Como predicción de **salida** producen números - **labels**\n\nPor lo tanto hay que trasnsformar los datos de entrada.",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eFeatures\u003c/h3\u003e\n\u003cp\u003eLos algoritmos ML utilizan datos numeŕicos:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eComo \u003cstrong\u003eentrada\u003c/strong\u003e toman un vector numérico - \u003cstrong\u003evector de features\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eComo predicción de \u003cstrong\u003esalida\u003c/strong\u003e producen números - \u003cstrong\u003elabels\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePor lo tanto hay que trasnsformar los datos de entrada.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106126_-815464487",
      "id": "20171030-162516_498978901",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Transformador de features\n\n\n        %%% yuml type\u003dclass style\u003dplain format\u003dsvg\n          [note:Dataframe;Entrada{bg:cornsilk}]-\u003e[Transformer;(featurizer)|transform(){bg:orange}]\n          [Transformer;(featurizer)|transform(){bg:orange}]-\u003e[note:Dataframe; vector features{bg:cornsilk}]\n        %%%\n\n#### (todo es Transformer o Estimator)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTransformador de features\u003c/h3\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3ADataframe%3BEntrada%7Bbg%3Acornsilk%7D%5D-%3E%5BTransformer%3B%28featurizer%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D%2C+%5BTransformer%3B%28featurizer%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D-%3E%5Bnote%3ADataframe%3B+vector%E2%80%82features%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003ch4\u003e(todo es Transformer o Estimator)\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106128_-805461015",
      "id": "20181023-184758_264849729",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación de vector de features (entrada)",
      "text": "import org.apache.spark.ml.feature.VectorAssembler\n\nval vAssembler \u003d new VectorAssembler()\n  .setInputCols(Array(\"kgs\", \"mts\"))\n  .setOutputCol(\"features\")\n\nval trainAssembled \u003d vAssembler.transform(trainDF)\n\nz.show(trainAssembled,5)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106129_-805845764",
      "id": "20171030-163816_785316912",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### VectorAssembler es un **Transformer**\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:trainDF{bg:cornsilk}]-\u003e[vAssembler;(modelo)|transform(){bg:orange}]\n  [vAssembler;(modelo)|transform(){bg:orange}]-\u003e[note:trainAssembled{bg:cornsilk}]\n%%%\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eVectorAssembler es un \u003cstrong\u003eTransformer\u003c/strong\u003e\u003c/h4\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3AtrainDF%7Bbg%3Acornsilk%7D%5D-%3E%5BvAssembler%3B%28modelo%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D%2C+%5BvAssembler%3B%28modelo%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D-%3E%5Bnote%3AtrainAssembled%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106131_-805076266",
      "id": "20171030-170208_678915767",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación de Labels (predicción)",
      "text": "%md Es necesario leer toda la entrada.",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eEs necesario leer toda la entrada.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106132_-807000011",
      "id": "20171030-165531_1386883868",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación de Labels",
      "text": "import org.apache.spark.ml.feature.StringIndexer\n\nval strIndexer \u003d new StringIndexer()\n  .setInputCol(\"sex\")\n  .setOutputCol(\"label\")\n\n// indexer tiene que leer la entrada\nval sexIndexer \u003d strIndexer.fit(trainAssembled)\n\nval trainFeaturized \u003d sexIndexer.transform(trainAssembled)\n\nz.show(trainFeaturized,5)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106134_-806230513",
      "id": "20171030-164611_870874723",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### StringIndexer es un Estimator\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:trainAssembled{bg:cornsilk}]-\u003e[strIdexer;(algoritmo)|fit(){bg:red}]\n  [strIdexer;(algoritmo)|fit(){bg:red}]-\u003e[note:sexIndexer;(model){bg:orange}]\n%%%\n\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:trainAssembled{bg:cornsilk}]-\u003e[sexIndexer;(model)|transform(){bg:orange}]\n  [sexIndexer;(model)|transform(){bg:orange}]-\u003e[note:trainFeaturized{bg:cornsilk}]\n%%%\n\n#### Más información\n* [Spark Docs - Extracting, transforming and selecting features](http://spark.apache.org/docs/latest/ml-features.html).\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eStringIndexer es un Estimator\u003c/h4\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3AtrainAssembled%7Bbg%3Acornsilk%7D%5D-%3E%5BstrIdexer%3B%28algoritmo%29%7Cfit%28%29%7Bbg%3Ared%7D%5D%2C+%5BstrIdexer%3B%28algoritmo%29%7Cfit%28%29%7Bbg%3Ared%7D%5D-%3E%5Bnote%3AsexIndexer%3B%28model%29%7Bbg%3Aorange%7D%5D.svg\" title\u003d\"title\" /\u003e\u003cimg src\u003d\"http://yuml.me/diagram/plain;dir:lr/class/%5Bnote%3AtrainAssembled%7Bbg%3Acornsilk%7D%5D-%3E%5BsexIndexer%3B%28model%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D%2C+%5BsexIndexer%3B%28model%29%7Ctransform%28%29%7Bbg%3Aorange%7D%5D-%3E%5Bnote%3AtrainFeaturized%7Bbg%3Acornsilk%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003ch4\u003eMás información\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-features.html\"\u003eSpark Docs - Extracting, transforming and selecting features\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106135_-806615262",
      "id": "20171030-170028_1904063913",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Visualización",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eVisualización\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106137_-808923755",
      "id": "20171030-182836_1299248311",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Image plotter en Python",
      "text": "%pyspark\n\ndef plot_classification(nomTable\u003d\"test\",surfaceTable\u003d\"grid\", prob\u003dFalse):\n    import matplotlib.pyplot as plt\n    import numpy as np\n    import matplotlib.cm as cm\n\n    from matplotlib.colors import ListedColormap, LinearSegmentedColormap\n\n    cmap_light \u003d LinearSegmentedColormap.from_list(\"light\", [\u0027#FF5555\u0027, \u0027#5555FF\u0027])\n    cmap_pastel \u003d LinearSegmentedColormap.from_list(\"pastel\", [\u0027#FF8888\u0027, \u0027#8888FF\u0027])\n    cmap_bold \u003d ListedColormap([\u0027#FF0000\u0027, \u0027#00FF00\u0027, \u0027#0000FF\u0027])\n\n    # helper function to display in Zeppelin\n    def show(p):\n        import StringIO\n        img \u003d StringIO.StringIO()\n        p.savefig(img, format\u003d\u0027png\u0027)#,dpi\u003d600)\n        img.seek(0)\n        print \"%html \u003cdiv style\u003d\u0027width:600px\u0027\u003e\u003cimg src\u003d\\\"data:image/png;base64,\" + img.buf.encode(\u0027base64\u0027).replace(\u0027\\n\u0027, \u0027\u0027) + \"\\\"/\u003e\u003c/div\u003e\"\n\n    plt.close(\u0027all\u0027)\n\n    plt.autoscale(enable\u003dTrue, axis\u003d\u0027x\u0027, tight\u003dTrue)\n\n    if surfaceTable:\n        sTable \u003d sqlContext.table(surfaceTable)\n\n        if prob:\n            pSTable \u003d sTable.select(\u0027kgs\u0027,\u0027mts\u0027,\u0027prob\u0027).toPandas()\n            Z \u003d pSTable[\u0027prob\u0027]\n        else:\n            pSTable \u003d sTable.select(\u0027kgs\u0027,\u0027mts\u0027,\u0027prediction\u0027).toPandas()\n            Z \u003d pSTable[\u0027prediction\u0027]\n\n        xs \u003d pSTable[\u0027kgs\u0027]\n        ys \u003d pSTable[\u0027mts\u0027]\n\n        xUs \u003d xs.unique()\n        yUs \u003d ys.unique()\n\n        xx, yy \u003d np.meshgrid(xUs,yUs)\n\n        Z \u003d Z.values.reshape(xx.shape).transpose()\n\n        if prob:\n            plt.pcolormesh(xx, yy, Z, cmap\u003dcmap_light)\n        else:\n            plt.pcolormesh(xx, yy, Z, cmap\u003dcmap_pastel)\n\n        plt.axis([xs.min(), xs.max(), ys.min(), ys.max()])\n\n    table \u003d sqlContext.table(nomTable)\n    \n    pTable \u003d table.select(\u0027kgs\u0027,\u0027mts\u0027,\u0027label\u0027).toPandas().sample(frac\u003d1)\n\n    xs \u003d pTable[\u0027kgs\u0027]\n    ys \u003d pTable[\u0027mts\u0027]\n    cs \u003d pTable[\u0027label\u0027]\n    plt.scatter(xs, ys, c\u003dcs, cmap\u003dcmap_bold, alpha\u003d0.5, s\u003d16)\n    plt.xlabel(\u0027kgs\u0027)\n    plt.ylabel(\u0027mts\u0027)\n\n    show(plt)\n    plt.close()",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "lineNumbers": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1540821106139_-808154257",
      "id": "20161102-154506_492289084",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compartir tabla con Python",
      "text": "trainFeaturized.createOrReplaceTempView(\"trainFeaturized\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1540821106140_-810078002",
      "id": "20171030-173945_821268472",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plot train data",
      "text": "%pyspark\nplot_classification(nomTable\u003d\"trainFeaturized\", surfaceTable\u003d\"\")",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106142_-809308504",
      "id": "20171030-173939_397652020",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Clasificación\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eClasificación\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106143_-809693253",
      "id": "20171030-182312_417188960",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Decision Tree",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eDecision Tree\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106144_-823928962",
      "id": "20171030-182448_326574792",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Entrenamiento",
      "text": "import org.apache.spark.ml.classification.DecisionTreeClassifier\n\n// Se crea el Estimator\nval dtEstimator \u003d new DecisionTreeClassifier()\n                .setFeaturesCol(\"features\")\n                .setLabelCol(\"label\")\n\n//dtEstimator.explainParams\n\nval dtModel \u003d dtEstimator.fit(trainFeaturized)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106146_-823159465",
      "id": "20161107-153258_1183600330",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n%%% yuml type\u003dclass style\u003dplain format\u003dsvg\n  [note:trainFeaturized{bg:cornsilk}]-\u003e[dtEstimator;(algoritmo ML)|fit(){bg:red}]\n  [dtEstimator;(algoritmo ML)|fit(){bg:red}]-\u003e[note:dtModel;(model){bg:orange}]\n%%%\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cimg src\u003d\"http://yuml.me/diagram/plain/class/%5Bnote%3AtrainFeaturized%7Bbg%3Acornsilk%7D%5D-%3E%5BdtEstimator%3B%28algoritmo%E2%80%82ML%29%7Cfit%28%29%7Bbg%3Ared%7D%5D%2C+%5BdtEstimator%3B%28algoritmo%E2%80%82ML%29%7Cfit%28%29%7Bbg%3Ared%7D%5D-%3E%5Bnote%3AdtModel%3B%28model%29%7Bbg%3Aorange%7D%5D.svg\" title\u003d\"title\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106147_-823544213",
      "id": "20171030-183244_477068133",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Probando el modelo",
      "text": "{\nval kgs \u003d z.input(\"Peso en kilos:\",\"80.0\").toString.toDouble\nval mts \u003d z.input(\"Altura en metros:\",\"1.8\").toString.toDouble\n\nval dfOneInput \u003d Seq((kgs,mts)).toDF(\"kgs\",\"mts\")\n\nval dfOneFeaturized \u003d vAssembler.transform(dfOneInput)\n\nval dfOnePrediction \u003d dtModel.transform(dfOneFeaturized)\n\nval labels \u003d sexIndexer.labels\n\nval num2Gen \u003d (n:Double) \u003d\u003e if (labels(n.toInt) \u003d\u003d \"F\") \"femenino\" else \"masculino\"\n\nval genre \u003d num2Gen(dfOnePrediction.first.getDouble(5))\n\nprintln(s\"\"\"%html\n\u003ch3\u003eGénero: $genre\u003c/h3\u003e\"\"\")\n}",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {
          "peso en kilos:": "90",
          "Peso en kilos:": "70.0",
          "Altura en metros:": "1.6"
        },
        "forms": {
          "Peso en kilos:": {
            "name": "Peso en kilos:",
            "displayName": "Peso en kilos:",
            "type": "input",
            "defaultValue": "80.0",
            "hidden": false
          },
          "Altura en metros:": {
            "name": "Altura en metros:",
            "displayName": "Altura en metros:",
            "type": "input",
            "defaultValue": "1.8",
            "hidden": false
          }
        }
      },
      "apps": [],
      "jobName": "paragraph_1540821106149_-825852707",
      "id": "20171031-115708_799482",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Featurize dataset de test",
      "text": "val testAssembled \u003d vAssembler.transform(testDF)\nval testFeaturized \u003d sexIndexer.transform(testAssembled)\n\nz.show(testFeaturized,5)\n\ntestFeaturized.createOrReplaceTempView(\"testFeaturized\")",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106151_-825083209",
      "id": "20171030-191336_34491578",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Calcular grilla de kgs*mts para visualizar fondo",
      "text": "/* Crea grid peso*altura del fondo\n * para el gráfico anterior\n**********************************/\nimport org.apache.spark.sql.DataFrame\n\ndef createGrid() : DataFrame \u003d {\n\n    val maxTics \u003d 255\n\n    def fgrid (x:Int, min:Double, max:Double, tics: Int) : Double \u003d {\n        val tics2 \u003d tics - 2\n        return ((x-1)*(max-min)+tics2*min)/tics2.toDouble\n    }\n\n    val (minKgs, maxKgs, minMts, maxMts) \u003d\n        people.agg(min(\u0027kgs), max(\u0027kgs), min(\u0027mts), max(\u0027mts))\n            .as[(Double,Double,Double,Double)].first\n\n    return sc.parallelize(0 to maxTics)\n            .flatMap(x \u003d\u003e (0 to maxTics).map((x,_)))\n            .map{case (x,y) \u003d\u003e (fgrid(x,minKgs,maxKgs,maxTics), fgrid(y,minMts,maxMts,maxTics))}\n            .toDF(\"kgs\",\"mts\")\n}\n\nval grid \u003d vAssembler.transform(createGrid()).cache\n\nz.show(grid,5)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106152_-827006954",
      "id": "20161107-030549_2115288931",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Predecimos grilla del fondo",
      "text": "// Creo predicciones de la grilla\nval gridPredictionDT \u003d dtModel.transform(grid)\n\nz.show(gridPredictionDT,5)\n\ngridPredictionDT.createOrReplaceTempView(\"gridPredictionDT\")",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106154_-826237456",
      "id": "20171030-185922_914672286",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plot Decision Tree Predictions",
      "text": "%pyspark\nplot_classification(nomTable\u003d\"testFeaturized\", surfaceTable\u003d\"gridPredictionDT\")",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106155_-826622205",
      "id": "20171030-191207_1802786448",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Ejercicio",
      "text": "%md\nModifique el siguiente programa para aumentar la **profundidad** del árbol de decisión a 10.\n\n#### Ayuda\n\n* Busque en documentación [API Spark - Decision Trees](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.classification.DecisionTreeClassifier) el *parameter setter*.\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eModifique el siguiente programa para aumentar la \u003cstrong\u003eprofundidad\u003c/strong\u003e del árbol de decisión a 10.\u003c/p\u003e\n\u003ch4\u003eAyuda\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eBusque en documentación \u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.classification.DecisionTreeClassifier\"\u003eAPI Spark - Decision Trees\u003c/a\u003e el \u003cem\u003eparameter setter\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106157_-828930698",
      "id": "20171030-192632_1207126648",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Se crea el Evaluator\nval dtEstimator2 \u003d new DecisionTreeClassifier()\n                .setFeaturesCol(\"features\")\n                .setLabelCol(\"label\")\n                .set... // llenar aqui la profundidad\n\n// Se crea el modelo con los datos de test featurizados\nval dtModel2 \u003d dtEstimator2...\n\n// Se predice la grilla\nval gridPredictionDT2 \u003d dtModel2.transform(grid)\n\n// Se envía a python para plotear\ngridPredictionDT2.createOrReplaceTempView(\"gridPredictionDT2\")\n\n",
      "dateUpdated": "Oct 29, 2018 10:52:18 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106158_-827776451",
      "id": "20171030-192143_1165730818",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plot Decision Tree Predictions",
      "text": "%pyspark\nplot_classification(nomTable\u003d\"testFeaturized\", surfaceTable\u003d\"gridPredictionDT2\")",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106159_-828161200",
      "id": "20161107-153542_1780323791",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Random Forest\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eRandom Forest\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106161_-818157729",
      "id": "20171030-195005_486215707",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación del modelo",
      "text": "import org.apache.spark.ml.classification.RandomForestClassifier\n\n\nval rfEstimator \u003d new RandomForestClassifier()\n                .setFeaturesCol(\"features\")\n                .setLabelCol(\"label\")\n                .setNumTrees(100)\n\nval rfModel \u003d rfEstimator.fit(trainFeaturized)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106162_-817003482",
      "id": "20171030-034039_1210912394",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Predecimos grilla del fondo",
      "text": "val gridPredictionRF \u003d rfModel.transform(grid)\n\ngridPredictionRF.createOrReplaceTempView(\"gridPredictionRF\")",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106164_-819311976",
      "id": "20171030-195356_14273686",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plot Random Forest",
      "text": "%pyspark\n\nplot_classification(nomTable\u003d\"testFeaturized\", surfaceTable\u003d\"gridPredictionRF\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106165_-819696724",
      "id": "20171030-034111_1613140514",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Logistic Regression\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eLogistic Regression\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106166_-818542478",
      "id": "20171030-200155_1231865651",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación del modelo",
      "text": "import org.apache.spark.ml.classification.LogisticRegression\n\nval lrEstimator \u003d new LogisticRegression()\n  .setMaxIter(100)\n  .setRegParam(0.01)\n\nval lrModel \u003d lrEstimator.fit(trainFeaturized)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106167_-818927227",
      "id": "20161107-130547_297924932",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Probando el modelo",
      "text": "{\nval kgs \u003d z.input(\"Peso en kilos:\",\"80.0\").toString.toDouble\nval mts \u003d z.input(\"Altura en metros:\",\"1.8\").toString.toDouble\n\nval dfOneInput \u003d Seq((kgs,mts)).toDF(\"kgs\",\"mts\")\n\nval dfOneFeaturized \u003d vAssembler.transform(dfOneInput)\n\nval dfOnePrediction \u003d lrModel.transform(dfOneFeaturized)\n\nval labels \u003d sexIndexer.labels\n\nval posF \u003d if (labels(0) \u003d\u003d \"F\") 0 else 1\n\nval femProb : Double \u003d dfOnePrediction.first\n                            .getAs[org.apache.spark.ml.linalg.DenseVector](4)(posF)\n\nval femProbPerc : Int \u003d (100.0 * femProb).ceil.toInt\n\nprintln(s\"\"\"%html\n\u003ch3\u003eProbabilidad que sea mujer: $femProbPerc %\u003c/h3\u003e\"\"\")\n}\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {
          "Peso en kilos:": "60.0",
          "Altura en metros:": "1.8"
        },
        "forms": {
          "Peso en kilos:": {
            "name": "Peso en kilos:",
            "displayName": "Peso en kilos:",
            "type": "input",
            "defaultValue": "80.0",
            "hidden": false
          },
          "Altura en metros:": {
            "name": "Altura en metros:",
            "displayName": "Altura en metros:",
            "type": "input",
            "defaultValue": "1.8",
            "hidden": false
          }
        }
      },
      "apps": [],
      "jobName": "paragraph_1540821106169_-821235720",
      "id": "20171031-121619_277408470",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Predecimos grilla del fondo",
      "text": "import org.apache.spark.ml.linalg.Vector\n\nval gridPredictionLR \u003d lrModel.transform(grid)\n\nval vec2ColUDF \u003d udf((x:Vector, index: Int) \u003d\u003e x(index))\n\ngridPredictionLR\n    .select($\"*\",vec2ColUDF($\"probability\",lit(1)).as(\"prob\"))\n    .createOrReplaceTempView(\"gridPredictionLR\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106170_-820081473",
      "id": "20171030-202050_1263604133",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plot Logistic Regression",
      "text": "%pyspark\n\nplot_classification(nomTable\u003d\"testFeaturized\", surfaceTable\u003d\"gridPredictionLR\", prob\u003dTrue)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106171_-820466222",
      "id": "20161107-131714_601581381",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Logistic Regression with Poly expansion",
      "text": "%md\n\n* El algoritmo ML *Logistic Regression* es un algoritmo de clasificación logísitica **lineal**. \n* Esta limitación puede salvarse aumentando la dimensión del espacio:\n\n    ![](https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/05_ml/dimension_expansion.png)\n\n### Para lograrlo puede utilizarse [Spark Polinomial Expansion](http://spark.apache.org/docs/latest/ml-features.html#polynomialexpansion).\n\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003eEl algoritmo ML \u003cem\u003eLogistic Regression\u003c/em\u003e es un algoritmo de clasificación logísitica \u003cstrong\u003elineal\u003c/strong\u003e.\u003c/li\u003e\n  \u003cli\u003eEsta limitación puede salvarse aumentando la dimensión del espacio:\n    \u003cp\u003e\u003cimg src\u003d\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/05_ml/dimension_expansion.png\" /\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003ePara lograrlo puede utilizarse \u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-features.html#polynomialexpansion\"\u003eSpark Polinomial Expansion\u003c/a\u003e.\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106173_-822774716",
      "id": "20171030-204410_530582793",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Ejercicio",
      "text": "%md\n\nModificar el siguiente programa para utilizar [Spark Polinomial Expansion](http://spark.apache.org/docs/latest/ml-features.html#polynomialexpansion).\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eModificar el siguiente programa para utilizar \u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-features.html#polynomialexpansion\"\u003eSpark Polinomial Expansion\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106174_-821620469",
      "id": "20171030-205821_996337765",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Logistic Regression con Poly expansion",
      "text": "import org.apache.spark.ml.feature.PolynomialExpansion\n\nval polyExpansion \u003d new PolynomialExpansion()\n  .setInputCol(\"features\")\n  .setOutputCol(\"features_expansion\")\n  .setDegree(...) // llenar (ver documentacion)\n\nval lrEstimatorPoly \u003d new LogisticRegression()\n  .setFeaturesCol(...) // llenar\n  .setMaxIter(100)\n  .setRegParam(0.01)\n\nval trainFeaturizedPoly \u003d polyExpansion.transform(trainFeaturized)\n\nval lrModelPoly \u003d lrEstimatorPoly.fit(...) // llenar\n\n\nval gridPoly \u003d polyExpansion.transform(grid)\n\nval gridPredictionLRPoly \u003d lrModelPoly.transform(gridPoly)\n\ngridPredictionLRPoly\n    .select($\"*\",vec2ColUDF($\"probability\",lit(1)).as(\"prob\"))\n    .createOrReplaceTempView(\"gridPredictionLRPoly\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106175_-822005218",
      "id": "20171030-030818_388929533",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nplot_classification(nomTable\u003d\"testFeaturized\", surfaceTable\u003d\"gridPredictionLRPoly\", prob\u003dTrue)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106176_-1131728082",
      "id": "20171030-040455_976462143",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Clustering\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eClustering\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106177_-1132112831",
      "id": "20171030-212118_1749792392",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación de datos 3D al azar",
      "text": "import org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.ml.linalg.{Vector,Vectors}\nimport org.apache.spark.sql.{DataFrame, Row}\nimport org.apache.spark.mllib.random.RandomRDDs.normalVectorRDD\n\nval dimension \u003d 3\nval cantVect \u003d 50\nval disper \u003d 5.0\n\n// Creo cantVect puntos con distribucion normal centrado en 5 ptos\nval dataset1 \u003d normalVectorRDD(sc, cantVect, dimension).\n    map(v \u003d\u003e Tuple1.apply(Vectors.dense(v(0), v(1), v(2)))).toDF(\"features\")\n\nval dataset2 \u003d normalVectorRDD(sc, cantVect, dimension).\n    map(v \u003d\u003e Tuple1.apply(Vectors.dense(v(0)+disper, v(1), v(2)))).toDF(\"features\")\n\nval dataset3 \u003d normalVectorRDD(sc, cantVect, dimension).\n    map(v \u003d\u003e Tuple1.apply(Vectors.dense(v(0), v(1)+disper, v(2)))).toDF(\"features\")\n\nval dataset4 \u003d normalVectorRDD(sc, cantVect, dimension).\n    map(v \u003d\u003e Tuple1.apply(Vectors.dense(v(0), v(1), v(2)+disper))).toDF(\"features\")\n\nval dataset5 \u003d normalVectorRDD(sc, cantVect, dimension).\n    map(v \u003d\u003e Tuple1.apply(Vectors.dense(v(0)+disper, v(1)+disper, v(2)+disper))).toDF(\"features\")\n\nval dataset \u003d dataset1.union(dataset2).union(dataset3).union(dataset4).union(dataset5)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106179_-1131343334",
      "id": "20171030-212217_1468036515",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Dataset con puntos 3D",
      "text": "z.show(dataset,5)",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106180_-1133267078",
      "id": "20181023-192830_1881710964",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Python plotter",
      "text": "%pyspark\n\ndef plot_clustering(nomTable\u003d\"evalData\", nomTableCenters\u003d\"\"):\n\n    import plotly as py\n    import plotly.graph_objs as go\n\n    pltWidth \u003d 800\n    pltHeight \u003d 600\n    \n    def plot(plot_dic, width\u003dpltWidth, **kwargs):\n        kwargs[\u0027output_type\u0027] \u003d \u0027div\u0027\n        plot_str \u003d py.offline.plot(plot_dic, **kwargs)\n        print(\u0027%%html \u003cdiv style\u003d\"width: %spx\"\u003e %s \u003c/div\u003e\u0027  % (width, plot_str))\n\n    pEvalData \u003d sqlContext.table(nomTable).toPandas()\n\n    if nomTableCenters:\n\n        pEvalCenters \u003d sqlContext.table(nomTableCenters).toPandas()\n\n        eData \u003d go.Scatter3d(\n            x\u003dpEvalData.x,\n            y\u003dpEvalData.y,\n            z\u003dpEvalData.z,\n            showlegend\u003dFalse,\n            mode\u003d\u0027markers\u0027,\n            marker\u003ddict(\n                size\u003d1.5,\n                color\u003dpEvalData.prediction, # set color to an array/list of desired values\n                colorscale\u003d\u0027Rainbow\u0027   # choose a colorscale\n            ),\n            opacity\u003d0.6\n        )\n\n        eCenters \u003d go.Scatter3d(\n            x\u003dpEvalCenters.x,\n            y\u003dpEvalCenters.y,\n            z\u003dpEvalCenters.z,\n            showlegend\u003dFalse,\n            mode\u003d\u0027markers\u0027,\n            marker\u003ddict(\n                size\u003d3,\n                line \u003d dict(\n                    width \u003d 1,\n                    color \u003d \u0027black\u0027\n                ),\n                symbol\u003d\u0027x\u0027,\n                color\u003dpEvalCenters.prediction, # set color to an array/list of desired values\n                colorscale\u003d\u0027Rainbow\u0027   # choose a colorscale\n            ),\n            opacity\u003d1.0\n        )\n        \n        data \u003d [eData,eCenters]\n\n        layout \u003d go.Layout(\n            title\u003d\"Clusters\",\n            width\u003dpltWidth,\n            height\u003dpltHeight\n        )\n\n    else:\n\n        eData \u003d go.Scatter3d(\n            x\u003dpEvalData.x,\n            y\u003dpEvalData.y,\n            z\u003dpEvalData.z,\n            showlegend\u003dFalse,\n            mode\u003d\u0027markers\u0027,\n            marker\u003ddict(\n                size\u003d1.5,\n                line \u003d dict(\n                    width \u003d 1,\n                    color \u003d \u0027black\u0027\n                ),\n                color\u003d\u0027cyan\u0027\n            ),\n            opacity\u003d0.8\n        )\n\n        data \u003d [eData]\n\n        layout \u003d go.Layout(\n            title\u003d\"Data\",\n            width\u003dpltWidth,\n            height\u003dpltHeight\n        )\n        \n\n    plot({\n        \"data\": data,\n        \"layout\": layout\n    })\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "lineNumbers": false,
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1540821106181_-1133651827",
      "id": "20171106-185738_491325525",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enviar tabla a Python",
      "text": "val vec2ColUDF \u003d udf((x:Vector, index: Int) \u003d\u003e x(index))\n\nval dsFeatures \u003d dataset \n                .select(vec2ColUDF($\"features\",lit(0)).as(\"x\"), vec2ColUDF($\"features\",lit(1)).as(\"y\"), \n                        vec2ColUDF($\"features\",lit(2)).as(\"z\"))\n\ndsFeatures.createOrReplaceTempView(\"dsFeatures\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106182_-1132497580",
      "id": "20171031-015639_1846072216",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plot data",
      "text": "%pyspark\nplot_clustering(nomTable\u003d\"dsFeatures\",nomTableCenters\u003d\"\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106183_-1132882329",
      "id": "20171031-015523_507876710",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Creación de modelo k-means",
      "text": "val kmeans \u003d new KMeans()\n  .setK(5)                              // set number of clusters\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"prediction\")\n\nval model \u003d kmeans.fit(dataset)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106185_-1135190823",
      "id": "20171030-212354_434864230",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluación de datos de entrada con el modelo",
      "text": "val evalData \u003d model.transform(dataset)\n\nz.show(evalData,5)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106186_-1134036576",
      "id": "20171030-212654_1670049849",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enviar tabla a Python",
      "text": "val vec2ColUDF \u003d udf((x:Vector, index: Int) \u003d\u003e x(index))\n\nevalData.select(vec2ColUDF($\"features\",lit(0)).as(\"x\"), vec2ColUDF($\"features\",lit(1)).as(\"y\"), \n                vec2ColUDF($\"features\",lit(2)).as(\"z\"), $\"prediction\")\n        .createOrReplaceTempView(\"evalData\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106187_-1134421325",
      "id": "20181023-193437_1148787820",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Centros",
      "text": "val centers \u003d spark.createDataFrame(model.clusterCenters.map(Tuple1.apply)).toDF(\"features\")\n\nval evalCenters \u003d model.transform(centers)\n\n// Send to python\nevalCenters.select(vec2ColUDF(\u0027features,lit(0)).as(\"x\"), vec2ColUDF(\u0027features,lit(1)).as(\"y\"), \n                vec2ColUDF(\u0027features,lit(2)).as(\"z\"), \u0027prediction)\n            .createOrReplaceTempView(\"evalCenters\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106188_-1136345069",
      "id": "20181023-193143_1035949127",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Clusters resultados",
      "text": "%pyspark\nplot_clustering(nomTable\u003d\"evalData\",nomTableCenters\u003d\"evalCenters\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106190_-1135575571",
      "id": "20171031-020723_554273089",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Documentación \n\n* [Spark MLib Guide](http://spark.apache.org/docs/latest/ml-guide.html)\n* [Databricks ML Documentation](https://docs.databricks.com/spark/latest/mllib/index.html)\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eDocumentación\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-guide.html\"\u003eSpark MLib Guide\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://docs.databricks.com/spark/latest/mllib/index.html\"\u003eDatabricks ML Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106191_-1135960320",
      "id": "20181023-195851_1433599159",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "FIN",
      "text": "val baseDir\u003d\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases\"\n\nz.put(\"baseDir\", baseDir)\nprint(\"\"\"%html\n\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n\"\"\")\n",
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "baseDir: String \u003d https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1540821106192_-1125572100",
      "id": "20171030-041758_1069452526",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Oct 29, 2018 10:51:46 AM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540821106194_-1124802602",
      "id": "20171030-111733_655673413",
      "dateCreated": "Oct 29, 2018 10:51:46 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Clase 05 - Machine Learning",
  "id": "2DWRC7DZT",
  "angularObjects": {
    "2CVPMZQDC:shared_process": [],
    "2CVZRWYXD:shared_process": [],
    "2CXC3J873:shared_process": [],
    "2CW9KVZFB:shared_process": [],
    "2CWBZB5J2:shared_process": [],
    "2CWQPZNH6:shared_process": [],
    "2CWB7GZBS:shared_process": [],
    "2CUMUUMCY:shared_process": [],
    "2CX36SA9F:shared_process": [],
    "2CVWTU38R:shared_process": [],
    "2CVGJFNZ4:shared_process": [],
    "2CUKDKYCE:shared_process": [],
    "2CWDFCUCZ:shared_process": [],
    "2CUNFHEUZ:shared_process": [],
    "2CW49AZMR:shared_process": [],
    "2CWE35VRJ:shared_process": [],
    "2CWV6WPV3:shared_process": [],
    "2CXGQWA1W:shared_process": [],
    "2CUU3PNNG:shared_process": []
  },
  "config": {},
  "info": {}
}